Aqui está uma versão mais organizada, eliminando redundâncias e consolidando as informações de forma clara:

---

## Organização de Componentes e Código no React

### Estrutura de Componentes

#### Componente `Square` - Exportação Default
Representa um quadrado estilizado com texto inspirador.

```jsx
const Square = () => (
    <div className="w-52 h-52 bg-orange-700 text-white">
        Texto qualquer inspirador.
    </div>
);

export default Square; // Permite importar com qualquer nome.
```

#### Componente `Circle` - Exportação Nomeada
Representa um círculo estilizado com texto.

```jsx
export const Circle = () => (
    <div className="w-52 h-52 bg-orange-800 text-white rounded-full">
        Círculo
    </div>
);
```

---

### JSX (JavaScript XML)

1. **Uso e Funcionamento**
   - JSX é uma extensão do JavaScript que permite criar interfaces com uma sintaxe semelhante ao HTML.
   - As expressões JavaScript são inseridas dentro de `{}` no JSX.

2. **Regras Importantes**
   - **Elemento Raiz Obrigatório**: Um componente deve retornar um único elemento raiz, como `<div>` ou `<>`.
   - **Fechamento de Tags**: Todas as tags devem ser fechadas (`<img />`, `<br />`).
   - **CamelCase**: Atributos como `class` e `onclick` são `className` e `onClick` no JSX.

---

### Organização de Arquivos e Componentes

- **Agrupando Componentes Relacionados**:  
  Crie arquivos separados para componentes e importe-os conforme necessário.  

**Exemplo - Arquivo `geoform.jsx`**:
```jsx
import Square from './Square';
import { Circle } from './Circle';

const GeoForm = () => (
    <>
        <Square />
        <Circle />
    </>
);

export default GeoForm;
```

Agora, ao usar o `GeoForm`, você já inclui `Square` e `Circle` sem importá-los individualmente.

---

### Passando `props` para Componentes

Os `props` permitem passar dados para componentes. Exemplo:

```jsx
<Person
    name="Elon Musk"
    avatar="URL.LINK"
    roles={["CEO", "CFO"]}
/>
```

#### Criando Tipos com TypeScript
Para evitar erros, defina os tipos dos `props`:

```tsx
type Props = {
    name: string;
    avatar?: string; // Opcional
    roles: string[];
};

export const Person = ({ name, avatar = "default.jpg", roles }: Props) => (
    <div>
        <img src={avatar} alt={name} />
        <h1>{name}</h1>
        <p>{roles.join(", ")}</p>
    </div>
);
```

- O avatar terá um valor padrão se não for informado.  
- Use destructuring (`{ name, avatar }`) para simplificar o código.

---

### Usando `children` em Componentes

O `children` permite inserir outros elementos em um componente:

```tsx
type Props = {
    children: React.ReactNode;
};

export const Card = ({ children }: Props) => (
    <div className="p-4 border">{children}</div>
);
```

Agora, você pode usar o componente como:

```jsx
<Card>
    <h3>Título</h3>
    <p>Conteúdo dentro do Card.</p>
</Card>
```

---

### Exemplo Completo - Listagem e Filtros

Usando `map` e `filter` para manipular dados:

```tsx
import { peopleList } from "@/data/peopleList";

const Page = () => {
    const chemists = peopleList.filter(person => person.profession === "chemist");

    return (
        <div>
            {peopleList.length > 0 && (
                <ul>
                    {peopleList.map(person => (
                        <li key={person.id}>{person.name} - {person.profession}</li>
                    ))}
                </ul>
            )}
            {chemists.length > 0 && (
                <>
                    <h3>Lista de Químicos</h3>
                    <ul>
                        {chemists.map(person => (
                            <li key={person.id}>{person.name}</li>
                        ))}
                    </ul>
                </>
            )}
        </div>
    );
};

export default Page;
```

Exercicio: Greeting condicional 1 

const Page = () => {
   const fullTime = new Intl.DateTimeFormat('pt-BR', {
      timeStyle: 'short',//hora  & minute
      hour12: false
   }).format();

   const hour = new Date().getHours(); //vc pode simular por exemplo : const hour = 15;
   let greeting = '';

   if(hour >= 0 && hour < 12) {
      greeting = 'Good Morning'
   } else if (hour >= 12 && hour < 18) {
      greeting ='Good Afternoon'
   } else if (hour >= 18 && hour <= 23) {
      greeting = 'Good Evening'
   }

   return (
      <div className="w-screen h-screen flex-col justify-center items-center text-white bg-gradient-to-r from-sky-500 to-indigo-500">
         <div className="text-9xl">{fullTime}</div>
         <div className="text-5xl font-bold">{greeting}</div>
      </div>
   )
}
export default Page;


Exericio 2: Greeting condicional 2 fazendo dentro do sx.

const Page = () => {
   const fullTime = new Intl.DateTimeFormat('pt-BR', {
      timeStyle: 'short',//hora  & minute
      hour12: false
   }).format();

   const hour = new Date().getHours(); //vc pode simular por exemplo : const hour = 15;

   return (
      <div className="w-screen h-screen flex-col justify-center items-center text-white bg-gradient-to-r from-sky-500 to-indigo-500">
         <div className="text-9xl">{fullTime}</div>
         <div className="text-5xl font-bold">
            {hour >= 0 && hour < 12 && 'Morning'} 
            {hour >= 12 && hour < 18 && 'Afternoon'}
            {hour >= 18 && hour <=23 && 'Evening'}
         </div>
      </div>
   )
}
export default Page;
////////////////////////////////////////////////////
Exercicio 3: Rating via Emoji
project-root/
├── src/
│   ├── App/
│   │   ├── Page.tsx
            import {EmojiRating} from '@/components/EmojiRating'
            const Page = () => {
            return (
                <div className="w-screen h-screen flex justify-center items-center">
                    <EmojiRating rate={3.2}/>
                </div>
            );
            }
            export default Page
│   ├── components/
│   │   ├── EmojiRating.tsx
            type Props = {
                rate : number;
            }
            export const EmojiRating = ({ rate }: Props) => {
                if(rate > 5) rate = 5;
                if(rate < 0) rate = 0;

                const rateInt = Math.floor(rate);
                const stars = '😀'.repeat(rateInt) + '😶'.repeat(5 - rateInt);

                return (
                    <div className="flex items-center text-6xl">
                        <div className="bg-gray-700 p-2 rounded">{rate.toFixed(1)}</div>
                        <div className="ml-3">{stars}</div>
                    </div>
                )
            }
    Outra Forma: 
            type Props = {
                rate : number;
            }
            export const EmojiRating = ({ rate }: Props) => {
                if(rate > 5) rate = 5;
                if(rate < 0) rate = 0;

                const emojis = ['😔','🙁','😐','🙂','😁'];
                const rateInt = Math.floor(rate);
                const stars = `${emojis[rateInt - 1]}`.repeat(rateInt) + '😶'.repeat(5 - rateInt);

                return (
                    <div className="flex items-center text-6xl">
                        <div className="bg-gray-700 p-2 rounded">{rate.toFixed(1)}</div>
                        <div className="ml-3">{stars}</div>
                    </div>
                )
            }
////////////////////////////////////////////////////
Exercicio 4: Tabela de notas de estudantes:
├── src/
│   ├── app/
│   │   ├── Page.tsx
import { StudentTable } from '@/components/StudentTable'
import { students } from '@/data/students'
const Page = () => {
   return (
      <div className="container mx-auto">
         <h1 className="text-5xl mb-5">Lista de Estudantes</h1>
         <StudentTable students={students} />
      </div>
   )
}
export default Page;
│   ├── components/
│   │   ├── StudentTable.tsx
import { Student } from '@/types/Student'
type Props = {
    students: Student[];
}
export const StudentTable = ({ students }: Props) => {
    return (
        <table className='w-full border-gray-600 rounded-md overflow-hidden'>
            <thead>
                <tr className='text-left border-b border-gray-600 bg-gray-800'>
                    <th className='p-3'>Name</th>
                    <th className='p-3'>Status</th>
                    <th className='p-3'>Grade 1</th>
                    <th className='p-3'>Grade 2</th>
                    <th className='p-3'>Final Grade</th>
                </tr>
            </thead>
            <tbody>
                {students.map(item =>  (
                    <tr key={item.id} className='text-gray-800 bg-gray-400 border-b border-gray-600'>
                        <td className='p-3 flex items-center'>
                           <img src={item.avatar} alt={item.name} className='w-10 h-10 rounded-full mr-3'/>
                           <div>
                                <div className='font-bold'>{item.name}</div>
                                <div>{item.email}</div>
                            </div> 
                        </td>
                        <td className='p-3'>
                            {item.active && <div className='px-2 py-1 inline-block rounded-md border border-green-800 bg-green-600 text-white text-xs'>Active</div>}
                            {!item.active && <div className='px-2 py-1 inline-block rounded-md border border-red-800 bg-red-600 text-white text-xs'>Inactive</div>}
                        </td>
                        <td className='p-3'> {item.grade1.toFixed(1)} </td>
                        <td className='p-3'> {item.grade2.toFixed(1)} </td>
                        <td className='p-3 font-bold'> {item.active ? ((item.grade1 + item.grade2) / 2).toFixed(1) : '-'} </td>
                    </tr>
                ))}
            </tbody>
        </table>
)};
│   ├── data/
│   │   ├── students.ts
import { Student } from "@/types/Student";

export const students: Student[] = [
    {
        id: 1,
        active: true,
        name: 'Fulano de Tal',
        email: 'fulano@escola.com.br',
        avatar: 'https://images.unsplash.com/photo-1547037579-f0fc020ac3be?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTh8fHJvc3RvfGVufDB8MHwwfHx8Mg%3D%3D&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',
        grade1: 7.3,
        grade2: 8.1
    },...]
│   ├── types/
│   │   ├── Student.ts
export type Student = { 
    id: number;
    active: boolean;
    name: string;
    email: string;
    avatar: string;
    grade1: number;
    grade2: number;
}